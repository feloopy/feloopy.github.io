name: fetch-stats

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-stats:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade requests beautifulsoup4 pypistats

      - name: Fetch stats & build JSON
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<'PY'
          import os, json, datetime, time, requests
          from requests.exceptions import RequestException

          def get_json(url, headers=None, default=None, retries=3, backoff=1.0, timeout=10):
              for attempt in range(1, retries+1):
                  try:
                      r = requests.get(url, headers=headers or {}, timeout=timeout)
                  except RequestException as e:
                      print(f"[{attempt}] RequestException for {url}: {e}")
                      if attempt < retries:
                          time.sleep(backoff * attempt)
                          continue
                      return default
                  print(f"[{attempt}] {url} -> status {r.status_code}")
                  # log small snippet for debugging
                  snippet = (r.text or "")[:600].replace("\n", " ")
                  print(f"Body snippet: {snippet!s}")
                  if r.status_code != 200:
                      if attempt < retries:
                          time.sleep(backoff * attempt)
                          continue
                      return default
                  try:
                      return r.json()
                  except ValueError as e:
                      print(f"[{attempt}] JSON decode failed for {url}: {e}")
                      if attempt < retries:
                          time.sleep(backoff * attempt)
                          continue
                      return default
              return default

          stats = {}

          gh_token = os.environ.get("GITHUB_TOKEN")
          gh_headers = {"Accept": "application/vnd.github.v3+json"}
          if gh_token:
              gh_headers["Authorization"] = f"token {gh_token}"

          # ---------- pypistats recent (day/week/month) ----------
          pkg = "feloopy"
          pypi_recent = get_json(f'https://pypistats.org/api/packages/{pkg}/recent', default={})
          d = pypi_recent.get('data', {}) if isinstance(pypi_recent, dict) else {}
          stats['day'] = int(d.get('last_day', 0) or 0)
          stats['week'] = int(d.get('last_week', 0) or 0)
          stats['month'] = int(d.get('last_month', 0) or 0)

          # ---------- pypistats overall (total by category) ----------
          pypi_overall = get_json(f'https://pypistats.org/api/packages/{pkg}/overall', default={})
          overall_data = pypi_overall.get('data', []) if isinstance(pypi_overall, dict) else []
          total = 0
          for item in overall_data:
              try:
                  if item.get('category') == 'without_mirrors':
                      total += int(item.get('downloads', 0) or 0)
              except Exception:
                  continue
          stats['total'] = total

          # If pypistats gave 0 for total, try pepy.tech as a fallback
          if stats['total'] == 0:
              pepy = get_json(f'https://pepy.tech/api/projects/{pkg}', default={})
              # pepy may return 'total_downloads' or 'total' or 'downloads' depending on API
              if isinstance(pepy, dict):
                  possible = (
                      pepy.get('total_downloads')
                      or pepy.get('total')
                      or pepy.get('downloads')
                      or pepy.get('total_downloads_all') if 'total_downloads_all' in pepy else None
                  )
                  try:
                      stats['total'] = int(possible or 0)
                      if stats['total'] > 0:
                          print("Using pepy.tech fallback for total downloads:", stats['total'])
                  except Exception:
                      stats['total'] = 0

          # ---------- GitHub repo info ----------
          gh = get_json('https://api.github.com/repos/feloopy/feloopy', headers=gh_headers, default={})
          stats['stars'] = int(gh.get('stargazers_count', 0) or 0)

          pushed_at_str = gh.get('pushed_at')
          if pushed_at_str:
              try:
                  pushed_at = datetime.datetime.strptime(pushed_at_str, '%Y-%m-%dT%H:%M:%SZ')
                  now = datetime.datetime.utcnow()
                  delta = now - pushed_at
                  stats['last_push'] = pushed_at_str
                  stats['days_since_push'] = delta.days
              except Exception:
                  stats['last_push'] = pushed_at_str
                  stats['days_since_push'] = None
          else:
              stats['last_push'] = None
              stats['days_since_push'] = None

          # ---------- Releases (feloopy and engine) ----------
          def get_release_info(repo_owner, repo_name, headers):
              base = f'https://api.github.com/repos/{repo_owner}/{repo_name}'
              latest = get_json(base + '/releases/latest', headers=headers, default=None)
              if latest:
                  tag = latest.get('tag_name', 'unknown')
                  rv = {
                      'version': tag[1:] if isinstance(tag, str) and tag.startswith('v') else tag,
                      'release_date': latest.get('published_at', 'unknown')
                  }
              else:
                  rv = {'version': 'unknown', 'release_date': 'unknown'}
              all_releases = get_json(base + '/releases', headers=headers, default=[])
              downloads = 0
              if isinstance(all_releases, list):
                  for rel in all_releases:
                      for asset in rel.get('assets', []) or []:
                          try:
                              downloads += int(asset.get('download_count', 0) or 0)
                          except Exception:
                              continue
              rv['downloads'] = downloads
              return rv

          feloopy_info = get_release_info('feloopy', 'feloopy', gh_headers)
          stats['feloopy_version'] = feloopy_info['version']
          stats['feloopy_release_date'] = feloopy_info['release_date']

          engine_info = get_release_info('feloopy', 'engine', gh_headers)
          stats['engine_version'] = engine_info['version']
          stats['engine_release_date'] = engine_info['release_date']
          stats['engine_downloads'] = engine_info['downloads']

          # source_downloads: look for assets that include 'Source' or 'source'
          feloopy_releases = get_json('https://api.github.com/repos/feloopy/feloopy/releases', headers=gh_headers, default=[])
          source_downloads = 0
          if isinstance(feloopy_releases, list):
              for release in feloopy_releases:
                  for asset in release.get('assets', []) or []:
                      name = (asset.get('name') or '').lower()
                      if 'source' in name:
                          try:
                              source_downloads += int(asset.get('download_count', 0) or 0)
                          except Exception:
                              continue
          stats['source_downloads'] = source_downloads

          # star percentage relative to monthly downloads (guarded)
          try:
              stats['star_pct'] = round((stats['stars'] / stats['month'] * 100)) if stats['month'] else 0
          except Exception:
              stats['star_pct'] = 0

          # ---------- history file ----------
          hist_file = 'stars_history.json'
          today = datetime.date.today().isoformat()
          try:
              with open(hist_file, 'r', encoding='utf-8') as f:
                  f.seek(0)
                  history = json.load(f) if f.readable() else {}
          except (FileNotFoundError, json.JSONDecodeError):
              history = {}
          history[today] = stats.get('stars', 0)
          with open(hist_file, 'w', encoding='utf-8') as f:
              json.dump(history, f, indent=2, ensure_ascii=False)

          stats['fetched_at'] = datetime.datetime.utcnow().isoformat() + 'Z'
          with open('stats.json', 'w', encoding='utf-8') as f:
              json.dump(stats, f, indent=2, ensure_ascii=False)

          print("Stats successfully collected and saved:")
          print(json.dumps(stats, indent=2))
          PY

      - name: Commit & push
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          git add stats.json stars_history.json || true
          git diff --staged --quiet || git commit -m "updated stats.json file."
          git push || echo "Nothing to push or push failed"
